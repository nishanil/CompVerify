{"Name":"SQLCipher Android","Id":3362,"Alias":"sqlcipher-for-xamarin-android","Description":"[SQLCipher](https://www.zetetic.net/sqlcipher/) provides transparent and secure 256-bit AES encryption of SQLite database files using established [security practices](https://www.zetetic.net/sqlcipher/design/). SQLCipher is a popular and widely deployed platform, used daily in many commercial and open source applications.\n\n### Strong Security for Mobile and Embedded Databases\n\n**No special knowledge of security or cryptography required!** Use a standard [SQLite.Net-PCL](https://github.com/oysteinkrog/SQLite.Net-PCL) compatible API while SQLCipher takes care of data security behind the scenes.\n\nSQLCipher has a small footprint and great performance so it\u0027s ideal for protecting embedded application databases and is well suited for mobile development. Key features included:\n\n1. Optimized for Xamarin\n2. Same API on iOS and Android\n3. Simple configuration\n4. 100% of database is encrypted\n5. SQLite.Net-PCL compatible APIs\n6. Low overhead encryption, often as low as 5-15%\n7. High performance with indexes and transactions\n8. Starts up and closes down quickly\n9. Works well on large databases\n10. Interoperability with SQLCipher on other platforms\n\nLicenses include 1 year of CipherCare, providing prioritized and confidential email support directly from the SQLCipher development team.\n","Version":"4.1.3.0","Summary":"Full database encryption using 256-bit AES.","QuickStart":"##Getting Started with SQLCipher \n\n### Compatibility\n\nWith the release of 4.0.0.0, SQLCipher for Xamarin Android replaces the previous sqlite-net client library with SQLite.Net.Core-PCL, a PCL based client library based on sqlite-net. The new API is almost identical to the old client library, however there is one important change to the way that a database connection is initialized. Therefore upgrading to this library will require application code to be updated, specifically around how the connection is made. For most applications this will only involve one or two lines of code change. Please see below for details. \n\n### Prerequisite\n\nStart by installing the SQLCipher for Xamarin Android PCL component and verify it is listed as project component.\n\nSQLCipher for Xamarin Android PCL provides a popular PCL-based API for interacting with an encrypted database:\n\n1. SQLite.Net-PCL compatible API based on the popular [SQLite.Net-PCL](https://github.com/oysteinkrog/SQLite.Net-PCL) API.\n\n_Tip: Before converting a project to use SQLCipher, remove any existing assembly references to Mono.Data.Sqlite, sqlite-net, or sqlite-net source code (i.e. SQLite.cs)._\n\n### Upgrade Notice\n\nWith the release of SQLCipher 3.0.0, the default key derivation iteration length has increase from 4,000 to 64,000, which provides a significantly increased level of security. Note however, by default, *SQLCipher 3 will not open old version 2 databases*.\n\nWe generally recommend that you upgrade any database files using the SQLCipher 2 file format. Provided that default SQLCipher configurations were used, execute the following command once the connection has been created:\n\n    PRAGMA cipher_migrate;\n    \nA result code of 0 indicates the upgrade was successful.  This upgrade only needs to be run once per database.  \n\n*Please read the [release notes](https://www.zetetic.net/blog/2013/11/11/sqlcipher-300-release.html) for details on backwards compatibility and performance before upgrading!*\n\n### SQLite.Net-PCL client library\n\n    using SQLite.Net;\n    using SQLite.Net.Attributes;\n    using SQLite.Net.Platform.SQLCipher.XamarinAndroid;\n    \n    ...\n\n    public class Model\n    {\n      [PrimaryKey,AutoIncrement]\n      public int Id { get; set; }\n      public string Content { get; set; }\n    }\n    \n    ...\n    \n    var documentsFolder = System.Environment.GetFolderPath (System.Environment.SpecialFolder.Personal);\n    var databasePath = Path.Combine(documentsFolder, \"sqlcipher.db\");\n    using(var conn = new SQLiteConnection(new SQLitePlatformAndroid(password), databasePath))\n    {\n      conn.CreateTable\u003cModel\u003e();\n    \n      conn.InsertOrReplace( \n        new Model() {Id = 0, Content = \"Hello, SQLCipher!\"});\n    \n      var models = conn.Query\u003cModel\u003e (\n      \"SELECT * FROM Model WHERE Id = ?\", 0);\n\n      foreach (var model in models)\n      {\n          Console.WriteLine (\"id:{0} content:{1}\", model.Id, model.Content);\n      }\n    }\n","Hash":"819c603f36e4965bab45054744b6d58d","TargetPlatforms":["android"],"TrialHash":null}