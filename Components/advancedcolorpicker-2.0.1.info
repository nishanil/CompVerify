{"Name":"Advanced Color Picker","Id":3347,"Alias":"advancedcolorpicker","Description":"# AdvancedColorPicker\n\nAn open source color picker component for Xamarin.iOS that is very easy to use.\n\n## Usage\n\nAdvancedColorPicker is very simple and easy to use. There are two helper methods \nthat allow for quickly presenting a color picker. \nThe first is `PresentAsync` that returns the selected color:\n\n    var color = await ColorPickerViewController.PresentAsync(\n        NavigationController, \n        \"Pick a color!\",\n        View.BackgroundColor);\n    \n    // use selected color\n        \nIn the case when async method aren\u0027t preferrable, there is the synchronous\n`Present` method that takes a callback:\n\n    ColorPickerViewController.Present(\n        NavigationController, \n        \"Pick a color!\",\n        View.BackgroundColor,\n        color =\u003e {\n            // use selected color\n        });\n\nIf there is need to embed the picker into another view, this can be done\nusing `ColorPickerView`:\n\n    var colorPicker = new ColorPickerView();\n    colorPicker.ColorPicked += (sender, e) =\u003e {\n        var color = e.SelectedColor;\n        \n        // use selected color\n    };\n","Version":"2.0.1","Summary":"An open source color picker component for Xamarin.iOS.","QuickStart":"# AdvancedColorPicker\n\nAn open source color picker component for Xamarin.iOS that is very easy to use.\n\n## Usage\n\nAdvancedColorPicker is very simple and easy to use. \nThere are three main ways to use AdvancedColorPicker: \n\n  1. `Present` \u0026 `PresentAsync`\n  2. `ColorPickerViewController`\n  3. `ColorPickerView`\n\n### Present \u0026 PresentAsync\n\nThere are two helper methods that allow for quickly presenting a color picker. \nThe first is `PresentAsync` that returns the selected color:\n\n    UIColor color = await ColorPickerViewController.PresentAsync(\n        NavigationController, \n        \"Pick a color!\",\n        View.BackgroundColor);\n\t\n\t// use selected color\n\t\t\nIn the case when async method aren\u0027t preferrable, there is the synchronous\n`Present` method that takes a callback:\n\n    ColorPickerViewController.Present(\n        NavigationController, \n        \"Pick a color!\",\n        View.BackgroundColor,\n\t\tcolor =\u003e {\n\t\t    // use selected color\n\t\t});\n\n### ColorPickerViewController\n\nThere is the `ColorPickerViewController`, which is a stand-alone controller that can be used\nto preesent a color picker to the user:\n\n    // create the picker\n    var picker = new ColorPickerViewController {\n        Title = \"Pick a color!\",\n        SelectedColor = View.BackgroundColor\n    };\n    \n    // events for colors as they are picked\n    picker.ColorPicked += (sender, e) =\u003e {\n        // use selected color\n        View.BackgroundColor = e.SelectedColor;\n    }\n    \n    // create the picker popup\n    var pickerNav = new UINavigationController(picker);\n    pickerNav.ModalPresentationStyle = UIModalPresentationStyle.FormSheet;\n    pickerNav.NavigationBar.Translucent = false;\n    var doneBtn = new UIBarButtonItem(UIBarButtonSystemItem.Done);\n    picker.NavigationItem.RightBarButtonItem = doneBtn;\n    doneBtn.Clicked += delegate {\n        // \"Done\" was clicked\n        \n        // use selected color\n        View.BackgroundColor = picker.SelectedColor;\n        \n        // hide the picker\n        NavigationController.DismissModalViewController(true);\n    };\n    \n    // show the picker\n    NavigationController.PresentModalViewController(pickerNav, true);\n\n### ColorPickerView\n\nIf there is need to embed the picker into another view, this can be done\nusing `ColorPickerView`:\n\n    var colorPicker = new ColorPickerView();\n    colorPicker.ColorPicked += (sender, e) =\u003e {\n        var color = e.SelectedColor;\n        \n        // use selected color\n    };\n\n## Getting Colors\n\nBoth `ColorPickerView` and `ColorPickerViewContoller` have the `SelectedColor` event \nthat can be used to detect when the selected color changes. \nThere will be multiple events as the user drags a finger on the screen:\n\n    var colorPicker = new ColorPickerView();\n    colorPicker.ColorPicked += (sender, e) =\u003e {\n        var color = e.SelectedColor;\n        \n        // use selected color\n    };\n\nTo get the last color that was selected, we can use the `SelectedColor` property:\n\n    var colorPicker = new ColorPickerView();\n    // ...\n    var color = colorPicker.SelectedColor;\n","Hash":"7660da1e68b8e27531dc74b1e2e02d9e","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}